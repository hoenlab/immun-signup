# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dex_pb2 as dex__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dex_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DexStub(object):
    """Dex represents the dex gRPC service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetClient = channel.unary_unary(
                '/api.Dex/GetClient',
                request_serializer=dex__pb2.GetClientReq.SerializeToString,
                response_deserializer=dex__pb2.GetClientResp.FromString,
                _registered_method=True)
        self.CreateClient = channel.unary_unary(
                '/api.Dex/CreateClient',
                request_serializer=dex__pb2.CreateClientReq.SerializeToString,
                response_deserializer=dex__pb2.CreateClientResp.FromString,
                _registered_method=True)
        self.UpdateClient = channel.unary_unary(
                '/api.Dex/UpdateClient',
                request_serializer=dex__pb2.UpdateClientReq.SerializeToString,
                response_deserializer=dex__pb2.UpdateClientResp.FromString,
                _registered_method=True)
        self.DeleteClient = channel.unary_unary(
                '/api.Dex/DeleteClient',
                request_serializer=dex__pb2.DeleteClientReq.SerializeToString,
                response_deserializer=dex__pb2.DeleteClientResp.FromString,
                _registered_method=True)
        self.CreatePassword = channel.unary_unary(
                '/api.Dex/CreatePassword',
                request_serializer=dex__pb2.CreatePasswordReq.SerializeToString,
                response_deserializer=dex__pb2.CreatePasswordResp.FromString,
                _registered_method=True)
        self.UpdatePassword = channel.unary_unary(
                '/api.Dex/UpdatePassword',
                request_serializer=dex__pb2.UpdatePasswordReq.SerializeToString,
                response_deserializer=dex__pb2.UpdatePasswordResp.FromString,
                _registered_method=True)
        self.DeletePassword = channel.unary_unary(
                '/api.Dex/DeletePassword',
                request_serializer=dex__pb2.DeletePasswordReq.SerializeToString,
                response_deserializer=dex__pb2.DeletePasswordResp.FromString,
                _registered_method=True)
        self.ListPasswords = channel.unary_unary(
                '/api.Dex/ListPasswords',
                request_serializer=dex__pb2.ListPasswordReq.SerializeToString,
                response_deserializer=dex__pb2.ListPasswordResp.FromString,
                _registered_method=True)
        self.CreateConnector = channel.unary_unary(
                '/api.Dex/CreateConnector',
                request_serializer=dex__pb2.CreateConnectorReq.SerializeToString,
                response_deserializer=dex__pb2.CreateConnectorResp.FromString,
                _registered_method=True)
        self.UpdateConnector = channel.unary_unary(
                '/api.Dex/UpdateConnector',
                request_serializer=dex__pb2.UpdateConnectorReq.SerializeToString,
                response_deserializer=dex__pb2.UpdateConnectorResp.FromString,
                _registered_method=True)
        self.DeleteConnector = channel.unary_unary(
                '/api.Dex/DeleteConnector',
                request_serializer=dex__pb2.DeleteConnectorReq.SerializeToString,
                response_deserializer=dex__pb2.DeleteConnectorResp.FromString,
                _registered_method=True)
        self.ListConnectors = channel.unary_unary(
                '/api.Dex/ListConnectors',
                request_serializer=dex__pb2.ListConnectorReq.SerializeToString,
                response_deserializer=dex__pb2.ListConnectorResp.FromString,
                _registered_method=True)
        self.GetVersion = channel.unary_unary(
                '/api.Dex/GetVersion',
                request_serializer=dex__pb2.VersionReq.SerializeToString,
                response_deserializer=dex__pb2.VersionResp.FromString,
                _registered_method=True)
        self.ListRefresh = channel.unary_unary(
                '/api.Dex/ListRefresh',
                request_serializer=dex__pb2.ListRefreshReq.SerializeToString,
                response_deserializer=dex__pb2.ListRefreshResp.FromString,
                _registered_method=True)
        self.RevokeRefresh = channel.unary_unary(
                '/api.Dex/RevokeRefresh',
                request_serializer=dex__pb2.RevokeRefreshReq.SerializeToString,
                response_deserializer=dex__pb2.RevokeRefreshResp.FromString,
                _registered_method=True)
        self.VerifyPassword = channel.unary_unary(
                '/api.Dex/VerifyPassword',
                request_serializer=dex__pb2.VerifyPasswordReq.SerializeToString,
                response_deserializer=dex__pb2.VerifyPasswordResp.FromString,
                _registered_method=True)


class DexServicer(object):
    """Dex represents the dex gRPC service.
    """

    def GetClient(self, request, context):
        """GetClient gets a client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateClient(self, request, context):
        """CreateClient creates a client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClient(self, request, context):
        """UpdateClient updates an existing client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteClient(self, request, context):
        """DeleteClient deletes the provided client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePassword(self, request, context):
        """CreatePassword creates a password.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePassword(self, request, context):
        """UpdatePassword modifies existing password.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePassword(self, request, context):
        """DeletePassword deletes the password.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPasswords(self, request, context):
        """ListPassword lists all password entries.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateConnector(self, request, context):
        """CreateConnector creates a connector.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateConnector(self, request, context):
        """UpdateConnector modifies existing connector.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteConnector(self, request, context):
        """DeleteConnector deletes the connector.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConnectors(self, request, context):
        """ListConnectors lists all connector entries.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVersion(self, request, context):
        """GetVersion returns version information of the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRefresh(self, request, context):
        """ListRefresh lists all the refresh token entries for a particular user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeRefresh(self, request, context):
        """RevokeRefresh revokes the refresh token for the provided user-client pair.

        Note that each user-client pair can have only one refresh token at a time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyPassword(self, request, context):
        """VerifyPassword returns whether a password matches a hash for a specific email or not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DexServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetClient': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClient,
                    request_deserializer=dex__pb2.GetClientReq.FromString,
                    response_serializer=dex__pb2.GetClientResp.SerializeToString,
            ),
            'CreateClient': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateClient,
                    request_deserializer=dex__pb2.CreateClientReq.FromString,
                    response_serializer=dex__pb2.CreateClientResp.SerializeToString,
            ),
            'UpdateClient': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClient,
                    request_deserializer=dex__pb2.UpdateClientReq.FromString,
                    response_serializer=dex__pb2.UpdateClientResp.SerializeToString,
            ),
            'DeleteClient': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteClient,
                    request_deserializer=dex__pb2.DeleteClientReq.FromString,
                    response_serializer=dex__pb2.DeleteClientResp.SerializeToString,
            ),
            'CreatePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePassword,
                    request_deserializer=dex__pb2.CreatePasswordReq.FromString,
                    response_serializer=dex__pb2.CreatePasswordResp.SerializeToString,
            ),
            'UpdatePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePassword,
                    request_deserializer=dex__pb2.UpdatePasswordReq.FromString,
                    response_serializer=dex__pb2.UpdatePasswordResp.SerializeToString,
            ),
            'DeletePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePassword,
                    request_deserializer=dex__pb2.DeletePasswordReq.FromString,
                    response_serializer=dex__pb2.DeletePasswordResp.SerializeToString,
            ),
            'ListPasswords': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPasswords,
                    request_deserializer=dex__pb2.ListPasswordReq.FromString,
                    response_serializer=dex__pb2.ListPasswordResp.SerializeToString,
            ),
            'CreateConnector': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateConnector,
                    request_deserializer=dex__pb2.CreateConnectorReq.FromString,
                    response_serializer=dex__pb2.CreateConnectorResp.SerializeToString,
            ),
            'UpdateConnector': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateConnector,
                    request_deserializer=dex__pb2.UpdateConnectorReq.FromString,
                    response_serializer=dex__pb2.UpdateConnectorResp.SerializeToString,
            ),
            'DeleteConnector': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteConnector,
                    request_deserializer=dex__pb2.DeleteConnectorReq.FromString,
                    response_serializer=dex__pb2.DeleteConnectorResp.SerializeToString,
            ),
            'ListConnectors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConnectors,
                    request_deserializer=dex__pb2.ListConnectorReq.FromString,
                    response_serializer=dex__pb2.ListConnectorResp.SerializeToString,
            ),
            'GetVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersion,
                    request_deserializer=dex__pb2.VersionReq.FromString,
                    response_serializer=dex__pb2.VersionResp.SerializeToString,
            ),
            'ListRefresh': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRefresh,
                    request_deserializer=dex__pb2.ListRefreshReq.FromString,
                    response_serializer=dex__pb2.ListRefreshResp.SerializeToString,
            ),
            'RevokeRefresh': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeRefresh,
                    request_deserializer=dex__pb2.RevokeRefreshReq.FromString,
                    response_serializer=dex__pb2.RevokeRefreshResp.SerializeToString,
            ),
            'VerifyPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyPassword,
                    request_deserializer=dex__pb2.VerifyPasswordReq.FromString,
                    response_serializer=dex__pb2.VerifyPasswordResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.Dex', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('api.Dex', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Dex(object):
    """Dex represents the dex gRPC service.
    """

    @staticmethod
    def GetClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/GetClient',
            dex__pb2.GetClientReq.SerializeToString,
            dex__pb2.GetClientResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/CreateClient',
            dex__pb2.CreateClientReq.SerializeToString,
            dex__pb2.CreateClientResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/UpdateClient',
            dex__pb2.UpdateClientReq.SerializeToString,
            dex__pb2.UpdateClientResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/DeleteClient',
            dex__pb2.DeleteClientReq.SerializeToString,
            dex__pb2.DeleteClientResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/CreatePassword',
            dex__pb2.CreatePasswordReq.SerializeToString,
            dex__pb2.CreatePasswordResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/UpdatePassword',
            dex__pb2.UpdatePasswordReq.SerializeToString,
            dex__pb2.UpdatePasswordResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/DeletePassword',
            dex__pb2.DeletePasswordReq.SerializeToString,
            dex__pb2.DeletePasswordResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPasswords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/ListPasswords',
            dex__pb2.ListPasswordReq.SerializeToString,
            dex__pb2.ListPasswordResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateConnector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/CreateConnector',
            dex__pb2.CreateConnectorReq.SerializeToString,
            dex__pb2.CreateConnectorResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateConnector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/UpdateConnector',
            dex__pb2.UpdateConnectorReq.SerializeToString,
            dex__pb2.UpdateConnectorResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteConnector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/DeleteConnector',
            dex__pb2.DeleteConnectorReq.SerializeToString,
            dex__pb2.DeleteConnectorResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListConnectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/ListConnectors',
            dex__pb2.ListConnectorReq.SerializeToString,
            dex__pb2.ListConnectorResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/GetVersion',
            dex__pb2.VersionReq.SerializeToString,
            dex__pb2.VersionResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRefresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/ListRefresh',
            dex__pb2.ListRefreshReq.SerializeToString,
            dex__pb2.ListRefreshResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeRefresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/RevokeRefresh',
            dex__pb2.RevokeRefreshReq.SerializeToString,
            dex__pb2.RevokeRefreshResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dex/VerifyPassword',
            dex__pb2.VerifyPasswordReq.SerializeToString,
            dex__pb2.VerifyPasswordResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
